DROP TRIGGER IF EXISTS delete_users;;
DROP TRIGGER IF EXISTS delete_user_roles;;
DROP TRIGGER IF EXISTS delete_restaurants;;
DROP TRIGGER IF EXISTS delete_menus;;
DROP TRIGGER IF EXISTS delete_votes;;

DROP FUNCTION IF EXISTS after_delete_users;;
DROP FUNCTION IF EXISTS after_delete_user_roles;;
DROP FUNCTION IF EXISTS after_delete_restaurants;;
DROP FUNCTION IF EXISTS after_delete_menus;;
DROP FUNCTION IF EXISTS after_delete_votes;;


DROP TABLE USER_ROLES IF EXISTS;;
DROP VIEW VOTERESULT IF EXISTS;;
DROP TABLE VOTES IF EXISTS;;
DROP TABLE MENUS IF EXISTS;;
DROP TABLE USERS IF EXISTS;;
DROP TABLE RESTAURANTS IF EXISTS;;
DROP SEQUENCE GLOBAL_SEQ IF EXISTS;;

DROP TABLE SHADOW_USERS IF EXISTS;;
DROP TABLE SHADOW_USER_ROLES IF EXISTS;;
DROP TABLE SHADOW_RESTAURANTS IF EXISTS;;
DROP TABLE SHADOW_MENUS IF EXISTS;;
DROP TABLE SHADOW_VOTES IF EXISTS;;


CREATE SEQUENCE GLOBAL_SEQ AS INTEGER START WITH 100000;;

CREATE TABLE USERS
(
    id         INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    name       VARCHAR(255)            NOT NULL,
    email      VARCHAR(255)            NOT NULL,
    password   VARCHAR(255)            NOT NULL,
    registered TIMESTAMP DEFAULT now() NOT NULL,
    enabled    BOOLEAN   DEFAULT TRUE  NOT NULL
);;
CREATE
UNIQUE INDEX users_unique_email_idx ON users (email);;

CREATE TABLE USER_ROLES
(
    user_id INTEGER NOT NULL,
    role    VARCHAR(255),
    CONSTRAINT user_roles_idx UNIQUE (user_id, role),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);;

CREATE TABLE RESTAURANTS
(
    id      INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    name    VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL
);;
CREATE UNIQUE INDEX restaurants_unique_name_address_idx ON RESTAURANTS (name, address);;

CREATE TABLE MENUS
(
    id            INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    restaurant_id INTEGER            NOT NULL,
    date          DATE DEFAULT now() NOT NULL,
    description    VARCHAR(255)       NOT NULL,
    price         BIGINT             NOT NULL,
    CONSTRAINT menus_unique_date_description_restaurant_idx UNIQUE (date, description, restaurant_id),
    FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE
);;

CREATE TABLE VOTES
(
    id            INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    date          DATE DEFAULT now() NOT NULL,
    user_id       INTEGER            NOT NULL,
    restaurant_id INTEGER            NOT NULL,
    FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);;
CREATE UNIQUE INDEX votes_unique_user_date_idx ON VOTES (user_id, date);;

CREATE VIEW voteresult
AS
select row_number() over () id, restaurant_id,
        date, sum (vt) voteCount, sum (mn) menuCount
        from (select r.name, r.id restaurant_id, v.date, 1 vt, 0 mn
        from RESTAURANTS r
        join votes v on v.restaurant_id = r.id
        union all
        select r.name, r.id restaurant_id, m.date, 0 vt, 1 mn
        from menus m
        join RESTAURANTS r on r.id = m.restaurant_id
        ) as voteresult
        group by name, restaurant_id, date
        order by restaurant_id, date, voteCount, menuCount;;

CREATE TABLE SHADOW_USERS
(
    ID         INTEGER                 NOT NULL,
    name       VARCHAR(255)            NOT NULL,
    email      VARCHAR(255)            NOT NULL,
    password   VARCHAR(255)            NOT NULL,
    registered TIMESTAMP               NOT NULL,
    enabled    BOOLEAN                 NOT NULL,
    DATE_EVENT TIMESTAMP DEFAULT now() NOT NULL
);;
CREATE
INDEX shadow_users_id_idx ON SHADOW_USERS (id);;
CREATE
INDEX shadow_users_email_idx ON SHADOW_USERS (EMAIL);;
CREATE
INDEX shadow_users_date_event_idx ON SHADOW_USERS (DATE_EVENT);;

CREATE TABLE SHADOW_USER_ROLES
(
    user_id    INTEGER                 NOT NULL,
    role       VARCHAR(255)            NOT NULL,
    DATE_EVENT TIMESTAMP DEFAULT now() NOT NULL
);;
CREATE
INDEX shadow_user_roles_id_idx ON SHADOW_USER_ROLES (user_id);;
CREATE
INDEX shadow_user_roles_date_event_idx ON SHADOW_USER_ROLES (DATE_EVENT);;

CREATE TABLE SHADOW_RESTAURANTS
(
    id         INTEGER                 NOT NULL,
    name       VARCHAR(255)            NOT NULL,
    address    VARCHAR(255)            NOT NULL,
    DATE_EVENT TIMESTAMP DEFAULT now() NOT NULL
);;
CREATE
INDEX shadow_restaurants_id_idx ON SHADOW_RESTAURANTS (id);;
CREATE
INDEX shadow_restaurants_date_event_idx ON SHADOW_RESTAURANTS (DATE_EVENT);;

CREATE TABLE SHADOW_MENUS
(
    id            INTEGER                 NOT NULL,
    restaurant_id INTEGER                 NOT NULL,
    date          DATE                    NOT NULL,
    description    VARCHAR(255)            NOT NULL,
    price         BIGINT                  NOT NULL,
    DATE_EVENT    TIMESTAMP DEFAULT now() NOT NULL
);;
CREATE
INDEX shadow_menus_id_idx ON SHADOW_MENUS (id);;
CREATE
INDEX shadow_menus_date_event_idx ON SHADOW_MENUS (DATE_EVENT);;

CREATE TABLE SHADOW_VOTES
(
    id            INTEGER                 NOT NULL,
    date          DATE                    NOT NULL,
    user_id       INTEGER                 NOT NULL,
    restaurant_id INTEGER                 NOT NULL,
    DATE_EVENT    TIMESTAMP DEFAULT now() NOT NULL
);;
CREATE
INDEX shadow_votes_id_idx ON SHADOW_VOTES (id);;
CREATE
INDEX shadow_votes_date_event_idx ON SHADOW_VOTES (DATE_EVENT);;



CREATE TRIGGER delete_users
    AFTER DELETE
    ON users
    REFERENCING OLD AS OLD FOR EACH ROW
    INSERT INTO SHADOW_USERS (ID, NAME, EMAIL, PASSWORD, REGISTERED, ENABLED)
    VALUES (OLD.ID, OLD.NAME, OLD.EMAIL, OLD.PASSWORD, OLD.REGISTERED, OLD.ENABLED);;

CREATE TRIGGER update_users
    AFTER UPDATE
    ON users
    REFERENCING OLD AS OLD FOR EACH ROW
    INSERT INTO SHADOW_USERS (ID, NAME, EMAIL, PASSWORD, REGISTERED, ENABLED)
    VALUES (OLD.ID, OLD.NAME, OLD.EMAIL, OLD.PASSWORD, OLD.REGISTERED, OLD.ENABLED);;


CREATE TRIGGER update_user_roles
    AFTER UPDATE
    ON user_roles
    REFERENCING OLD AS OLD FOR EACH ROW
    INSERT INTO SHADOW_USER_ROLES (ROLE, USER_ID) VALUES (OLD.ROLE, OLD.USER_ID);;

CREATE TRIGGER delete_user_roles
    AFTER DELETE
    ON user_roles
    REFERENCING OLD AS OLD FOR EACH ROW
    INSERT INTO SHADOW_USER_ROLES (ROLE, USER_ID) VALUES (OLD.ROLE, OLD.USER_ID);;

CREATE TRIGGER update_restaurants
    AFTER UPDATE
    ON restaurants
    REFERENCING OLD AS OLD FOR EACH ROW
    INSERT INTO SHADOW_RESTAURANTS (ID, NAME, ADDRESS) VALUES (OLD.ID, OLD.NAME, OLD.ADDRESS);;

CREATE TRIGGER delete_restaurants
    AFTER DELETE
    ON restaurants
    REFERENCING OLD AS OLD FOR EACH ROW
    INSERT INTO SHADOW_RESTAURANTS (ID, NAME, ADDRESS) VALUES (OLD.ID, OLD.NAME, OLD.ADDRESS);;

CREATE TRIGGER update_menus
    AFTER UPDATE
    ON menus
    REFERENCING OLD AS OLD FOR EACH ROW
    INSERT INTO SHADOW_MENUS (ID, RESTAURANT_ID, description, PRICE, DATE) VALUES (OLD.ID, OLD.RESTAURANT_ID, OLD.description, OLD.PRICE, OLD.DATE);;

CREATE TRIGGER delete_menus
    AFTER DELETE
    ON menus
    REFERENCING OLD AS OLD FOR EACH ROW
    INSERT INTO SHADOW_MENUS (ID, RESTAURANT_ID, description, PRICE, DATE) VALUES (OLD.ID, OLD.RESTAURANT_ID, OLD.description, OLD.PRICE, OLD.DATE);;

CREATE TRIGGER delete_votes
    AFTER DELETE
    ON votes
    REFERENCING OLD AS OLD FOR EACH ROW
    INSERT INTO SHADOW_VOTES (ID, DATE, USER_ID, RESTAURANT_ID) VALUES (OLD.ID, OLD.DATE, OLD.USER_ID, OLD.RESTAURANT_ID);;

CREATE TRIGGER update_votes
    AFTER UPDATE
    ON votes
    REFERENCING OLD AS OLD FOR EACH ROW
    INSERT INTO SHADOW_VOTES (ID, DATE, USER_ID, RESTAURANT_ID) VALUES (OLD.ID, OLD.DATE, OLD.USER_ID, OLD.RESTAURANT_ID);;